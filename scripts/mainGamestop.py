import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from tkinter import *
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM, Bidirectional

window = Tk()
window.title('STOCK PREDICTION GRAPHS')
gamestop_stock_data = pd.read_csv('/Users/eminn/PycharmProjects/stockPricePredictions/data/GME.csv')

"""
This code block formats the gamestop_stock_data
variable into a table that can be used to 
extract the columns with the information that we need,
such as Date, Open Price, and Close Price.
"""
gamestop_stock_data = gamestop_stock_data[['Date', 'Open', 'Close']]
gamestop_stock_data['Date'] = pd.to_datetime(gamestop_stock_data['Date'].apply(lambda x : x.split()[0]))
gamestop_stock_data.set_index('Date', drop=True, inplace=True)
# print(gamestop_stock_data.head())

"""
method to print the real-data opening
stock prices of GOOGL in a graph.
will compare this graph to the graph
of the open stock prices generated by
the neural network. 
"""
def printInitialOpenStockPrices():
    figure, ax = plt.subplots(1, 2, figsize=(20, 7))
    chart_type = FigureCanvasTkAgg(figure, window)
    chart_type.get_tk_widget().pack()
    ax[0].plot(gamestop_stock_data['Open'], label='Open', color='green')
    ax[0].set_xlabel('Date', size=15)
    ax[0].set_ylabel('Price', size=15)
    ax[0].legend()
    window.mainloop()
"""
method to print the real-data closing
stock prices of GOOGL in a graph.
will compare this graph to the graph
of the closing stock prices generated by
the neural network. 
"""
def printInitialCloseStockPrices():
    figure, ax = plt.subplots(1, 2, figsize=(20, 7))
    chart_type = FigureCanvasTkAgg(figure, window)
    chart_type.get_tk_widget().pack();
    ax[1].plot(gamestop_stock_data['Close'], label='Close', color='blue')
    ax[1].set_xlabel('Date', size=15)
    ax[1].set_ylabel('Price', size=16)
    ax[1].legend()
    window.mainloop()

# printInitialOpenStockPrices()
# printInitialCloseStockPrices()

MMS = MinMaxScaler()
gamestop_stock_data[gamestop_stock_data.columns] = MMS.fit_transform(gamestop_stock_data)
print(gamestop_stock_data.shape)

training_size = round(len(gamestop_stock_data) * 0.80) #Selecting 80% of the data for training and leaving the remaining for testing
train_data = gamestop_stock_data[:training_size] #The specific data to use to train the model
test_data = gamestop_stock_data[training_size:]  #the specific data to use to test the model

"""
Function to create sequences of data to use
for training and testing.
"""


def create_sequence(dataset):
    sequences = []
    labels = []
    start_index = 0

    for stop_index in range(50, len(dataset)): #selecting 25 rows at a time
        sequences.append(dataset.iloc[start_index:stop_index])
        labels.append(dataset.iloc[stop_index])
        start_index += 1
    return (np.array(sequences), np.array(labels))

train_sequence, train_label = create_sequence(train_data)
test_sequence, test_label = create_sequence(test_data)

print(train_sequence.shape, train_label.shape, test_sequence.shape, test_label.shape)


"""
CREATING LSTM MODEL
"""
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(train_sequence.shape[1], train_sequence.shape[2])))
model.add(Dropout(0.1))
model.add(LSTM(units=50))
model.add(Dense(2))

model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_absolute_error'])
model.summary()

model.fit(train_sequence, train_label, epochs=80, validation_data=(test_sequence, test_label), verbose=1)

test_predicted = model.predict(test_sequence)
print(test_predicted[:5])

test_inverse_predicted = MMS.inverse_transform(test_predicted)
print(test_inverse_predicted[:5])

gas_slic_data = pd.concat([gamestop_stock_data.iloc[-202:].copy(),pd.DataFrame(test_inverse_predicted,columns=['open_predicted','close_predicted'],index=gamestop_stock_data.iloc[-202:].index)], axis=1)

gas_slic_data[['Open', 'Close']] = MMS.inverse_transform(gas_slic_data[['Open', 'Close']])
print(gas_slic_data.head())
"""
outputs the predicted opening
price as a graph on top of the 
actual opening price graph for
comparison.
"""
gas_slic_data[['Open', 'open_predicted']].plot(figsize=(10,6))
plt.xticks(rotation = 45)
plt.xlabel('Date', size=15)
plt.ylabel('Stock Price', size=15)
plt.title('Actual vs Predicted for opening price', size=15)
plt.show()

"""
outputs the predicted closing
price as a graph on top of the 
actual closing price graph for
comparison
"""
gas_slic_data[['Close', 'close_predicted']].plot(figsize=(10,6))
plt.xticks(rotation=45)
plt.xlabel('Date', size=15)
plt.ylabel('Price', size=15)
plt.title('Actual vs Predicted for closing price', size=15)
plt.show()
